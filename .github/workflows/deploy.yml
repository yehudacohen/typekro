name: Deploy TypeKro Documentation & Package

on:
  push:
    branches: [ master ]
    paths: [ 'docs/**', '.github/workflows/**', 'package.json' ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: write
  pages: write  
  id-token: write

jobs:
  # Run tests and upload coverage
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        
      - name: Install dependencies
        run: bun install
        
      - name: Run tests with coverage
        run: bun test --coverage --coverage-reporter=lcov --timeout 20000 $(find test -name '*.test.ts' | grep -v integration)
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Build docs on master changes
  build-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        
      - name: Install dependencies
        run: bun install
        
      - name: Build documentation
        run: bun run docs:build
        
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/.vitepress/dist
  
  # Deploy docs to GitHub Pages
  deploy-docs:
    needs: build-docs
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Check for version changes and publish
  check-version:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    outputs:
      version-changed: ${{ steps.check.outputs.changed }}
      new-version: ${{ steps.check.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          
      - name: Get package.json version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
      - name: Check if version tag exists
        id: check
        run: |
          VERSION="${{ steps.package-version.outputs.version }}"
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "Tag v$VERSION already exists"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "New version detected: $VERSION"
          fi

  # Publish to npm when version changes
  publish-npm:
    needs: check-version
    runs-on: ubuntu-latest
    if: needs.check-version.outputs.version-changed == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
        
      - name: Install dependencies
        run: bun install
        
      - name: Build library
        run: bun run build
          
      - name: Setup Node.js for npm
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Publish to npm
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v${{ needs.check-version.outputs.new-version }}"
          git push origin "v${{ needs.check-version.outputs.new-version }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Create GitHub Release
        run: |
          gh release create "v${{ needs.check-version.outputs.new-version }}" \
            --title "TypeKro v${{ needs.check-version.outputs.new-version }}" \
            --generate-notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
